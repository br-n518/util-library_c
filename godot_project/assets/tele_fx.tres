[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

// colors are unclamped, you can overload values and clip

uniform sampler2D noise1;
uniform sampler2D noise2;
uniform vec3 color1 = vec3(2.,0.05,0.);
uniform vec3 color2 = vec3(1.5,0.25,0.);
// cooling is color-mod, independent of time
uniform float cooling = 0;
uniform vec2 speed1 = vec2(0);
uniform vec2 speed2 = vec2(0);

void fragment() {
	vec3 base = color1 * texture(noise1, UV - (speed1*TIME)).x;
	vec3 sub = color2 * texture(noise1, UV - (speed2*TIME)).x;
	
	ALBEDO = (base + sub)/2. - (sub * cooling);
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]
seed = 4
octaves = 2
period = 87.0
persistence = 0.77
lacunarity = 0.64

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[resource]
shader = SubResource( 1 )
shader_param/color1 = Vector3( 1, 0.05, 2 )
shader_param/color2 = Vector3( 0.5, 0.25, 1 )
shader_param/cooling = 0.0
shader_param/speed1 = Vector2( 0.75, 0 )
shader_param/speed2 = Vector2( 0, -0.75 )
shader_param/noise1 = SubResource( 3 )
shader_param/noise2 = SubResource( 5 )
